services:
  dnsx_service:
    container_name: dnsx_service
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app
    build:
      context: dnsx_service/
      dockerfile: ./Dockerfile
    ports:
      - "8231:8231"

  subdomain_service:
    container_name: subdomain_service
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app
    build:
      context: subfinder_service/
      dockerfile: ./Dockerfile
    ports:
      - "8230:8230"

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: unless-stopped
    environment:
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_NODE_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

# for test kafka
  kafka-ui:
    image: redpandadata/console:latest
    container_name: kafka_ui
    restart: unless-stopped
    environment:
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "8099:8080"
    depends_on:
      - kafka
    networks:
      - app

#  db_auth_service:
#    image: mysql:9.3
#    container_name: db_auth_service
#    restart: unless-stopped
#    volumes:
#      - auth:/var/lib/mysql
#    env_file:
#      - auth_service/.env_db
#    networks:
#      - app
#    healthcheck:
#      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
#      timeout: 5s
#      retries: 5
#
#  auth_service:
#    container_name: auth_service
#    build:
#      context: auth_service/
#      dockerfile: ./Dockerfile
#
#    depends_on:
#      db_auth_service:
#        condition: service_healthy
#      redis:
#        condition: service_started
#
#    env_file:
#      - auth_service/.env
#    networks:
#      - app
#
#    healthcheck:
#      test:
#        [ "CMD", "curl", "-f", "http://auth_service:8228/users/health_check" ]
#      interval: 5s
#      retries: 5
#
#  db_core_service:
#    image: mysql:9.3
#    container_name: db_core_service
#    command:
#      - "--port=3307"
#    restart: unless-stopped
#    volumes:
#      - core:/var/lib/mysql
#    env_file:
#      - core_service/.env_db
#    networks:
#      - app
#    healthcheck:
#      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
#      timeout: 5s
#      retries: 5
#
#  core_service:
#    container_name: core_service
#    build:
#      context: core_service/
#      dockerfile: ./Dockerfile
#    depends_on:
#      db_core_service:
#        condition: service_healthy
#      redis:
#        condition: service_started
#    env_file:
#      - core_service/.env
#    networks:
#      - app
#    healthcheck:
#      test:
#        [ "CMD", "curl", "-f", "http://core_service:8229/core/health_check" ]
#      interval: 5s
#      retries: 5
#
#  kraken_d:
#    container_name: kraken_d
#    build:
#      context: ./kraken_d
#      dockerfile: ./Dockerfile
#    depends_on:
#      auth_service:
#        condition: service_healthy
#    ports:
#      - "8080:8080"
#    networks:
#      - app
#
#  redis:
#    image: redis:8.0.2
#    container_name: redis
#    restart: always
#    networks:
#      - app

networks:
  app:
    driver: bridge

volumes:
  auth:
    driver: local
  core:
    driver: local